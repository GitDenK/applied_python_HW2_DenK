from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from services import food_api
from storage import users
from states import FoodLogStates
from aiogram.filters import Command, CommandObject

router = Router()


@router.message(Command("log_water"))
async def log_water(message: Message, command: CommandObject):
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")

    if not command.args:
        return await message.answer("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /log_water 500")

    try:
        amount = int(command.args)
        users[user_id]['logged_water'] += amount
        remaining = users[user_id]['water_goal'] - users[user_id]['logged_water']
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–ª –≤–æ–¥—ã\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª"
        )
    except ValueError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–ª>")


@router.message(Command("log_food"))
async def log_food_start(message: Message, command: CommandObject, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")

    if not command.args:
        return await message.answer("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /log_food —è–±–ª–æ–∫–æ")

    product = command.args
    calories = food_api.get_product_calories(product)

    if not calories:
        return await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòû")

    await state.update_data(calories=calories)
    await message.answer(f"{product} ‚Äî {calories} –∫–∫–∞–ª –Ω–∞ 100 –≥—Ä–∞–º–º. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
    await state.set_state(FoodLogStates.quantity)


@router.message(FoodLogStates.quantity)
async def process_weight(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await state.update_data(quantity=float(message.text))

    user_data = await state.get_data()
    total_calories = user_data['calories'] * user_data['quantity'] / 100
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    users[user_id]['logged_calories'] += total_calories

    await message.answer(
        f"–ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.1f} –∫–∫–∞–ª."
    )
    await state.clear()


@router.message(Command("log_workout"))
async def log_workout(message: Message, command: CommandObject):
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")

    if not command.args:
        return await message.answer("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /log_workout –±–µ–≥ 30")

    try:
        args = command.args.split()
        if len(args) != 2:
            return await message.answer("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /log_workout –±–µ–≥ 30")

        workout_type, minutes = args[0], args[1]
        minutes = int(minutes)
        burned = minutes * 10

        users[user_id]['burned_calories'] += burned
        users[user_id]['logged_water'] -= (minutes // 30) * 200

        await message.answer(
            f"üèãÔ∏è {workout_type} {minutes} –º–∏–Ω ‚Äî {burned} –∫–∫–∞–ª\n"
            f"üí¶ –î–æ–±–∞–≤—å—Ç–µ {200 * (minutes // 30)} –º–ª –≤–æ–¥—ã"
        )
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_workout <—Ç–∏–ø> <–º–∏–Ω—É—Ç—ã>")

